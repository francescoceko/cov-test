apply plugin: 'jacoco'

private static boolean isAndroidModule(Project project) {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    boolean isKotlinAndroid = project.plugins.hasPlugin('kotlin-android')
    return isAndroidLibrary || isAndroidApp || isKotlinAndroid
}

jacoco {
    toolVersion = "0.8.9"
}

coveralls {
    sourceDirs += ['app/src/main/java']
    jacocoReportPath "${buildDir}/coverage-report"
}

//coverallsJacoco {
//    // println("sadfa $sourceSets ")
//    reportSourceSets += files("/app/src/main/java")
//    reportPath "${buildDir}/coverage-report"
//}

project.afterEvaluate {
    if (isAndroidModule(project)) {
        setupAndroidReporting()
    } else {
        setupKotlinReporting()
    }
}

def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn test
        reports {
            csv.enabled false
            xml {
                enabled true
                destination file("${buildDir}/coverage-report.xml")
            }
            html {
                enabled true
                destination file("${buildDir}/coverage-report-html")
            }
        }
    }
}

def setupAndroidReporting() {
    def variantName = 'debug'
    def taskName = 'testDebugUnitTest'

    tasks.withType(Test).configureEach {
        jacoco.includeNoLocationClasses true
        jacoco.excludes = ['jdk.internal.*']
    }
    task jacocoTestReport(
            type: JacocoReport,
            dependsOn: [taskName]
    ) {
//    tasks.register("jacocoTestReport", JacocoReport) {
//        dependsOn tasks.named(taskName)
        reports {
            csv {
                enabled true
            }
            xml {
                setEnabled(true)
                destination file("${buildDir}/coverage-report")
            }
            html {
                enabled true
                destination file("${buildDir}/coverage-report-html5")
            }

        }
        // Change as needed
        def fileFilter = [
                '**/*Application.*',
                '**/*Activity.*',
                '**/*Fragment.*',
                '**/*JsonAdapter.*',
                '**/di/**',
                '**/*Dagger.*',
                // data binding
                'android/databinding/**/*.class',
                '**/android/databinding/*Binding.class',
                '**/android/databinding/*',
                '**/androidx/databinding/*',
                '**/BR.*',
                // android
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                // butterKnife
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                // dagger
                '**/*_MembersInjector.class',
                '**/Dagger*Component.class',
                '**/Dagger*Component$Builder.class',
                '**/*Module_*Factory.class',
                '**/di/module/*',
                '**/*_Factory*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                // kotlin
                '**/*MapperImpl*.*',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/*Component*.*',
                '**/*BR*.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.*',
                '**/*Companion*.*',
                '**/*Module*.*',
                '**/*Dagger*.*',
                '**/*Hilt*.*',
                '**/*MembersInjector*.*',
                '**/*_MembersInjector.class',
                '**/*_Factory*.*',
                '**/*_Provide*Factory*.*',
                '**/*Extensions*.*',
                // sealed and data classes
                '**/*$Result.*',
                '**/*$Result$*.*',
        ]
        def debugTree = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/$variantName",
                excludes: fileFilter
        )
        def mainSrc = "$projectDir/src/main/java"
        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([debugTree])
        executionData.from = fileTree(
                dir: project.buildDir,
                includes: [
                        // 'jacoco/testStagingUnitTest.exec',
                        "outputs/unit_test_code_coverage/${variantName}UnitTest/${taskName}.exec",
                        // 'outputs/code-coverage/connected/*coverage.ec'
                ]
        )
    }
}